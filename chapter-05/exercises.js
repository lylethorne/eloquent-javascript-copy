// /////////////////////////////////////////////////////////////////////////////
// flatten /////////////////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

function flatten(nestedArray) {
  //reduce
  let results = nestedArray.reduce((accumulator, current) => accumulator.concat(current), []);
  return results;
}

// /////////////////////////////////////////////////////////////////////////////
// loop ////////////////////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

function loop(value, test, update, body) {
  //start at the value // testing value on each iteration  //value reassigned to updated for next iteration
for(let i = value; test(value); value = update(value)){
  //calliing body and giving it current value
  body(value);
}
}

// /////////////////////////////////////////////////////////////////////////////
// every ///////////////////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

function every(array, test) {
  for(let i = 0; i > array.length; i++){
    if(test(array[i])){
      return false;
    }
  }
  return true;
}

// /////////////////////////////////////////////////////////////////////////////
// dominantDirection ///////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

function dominantDirection(text) {
  //initz count to the result of the count by value of
  let count = countBy(text, char => {
    //intiz script to result of charascript at the character and code point of 0
    let script = characterScript(char.codePointAt(0));
    //return script if script.direction
    return script ? script.direction : 'none';
    //filtering away the object name
  }).filter(({name}) => name != 'none');
  // if the length of count is 0
  if(count.length === 0){
    return 'ltr';
  }
  //else count length is not 0, reduce the current  
  return count.reduce((accumulator, current) => {
    if(accumulator.count > current.count){
      return accumulator;
    }
    return current;
  });


}

// /////////////////////////////////////////////////////////////////////////////
//  //////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    flatten,
    loop,
    every,
    dominantDirection,
  };
};